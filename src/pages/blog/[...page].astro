---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import getReadingTime from 'reading-time';

export async function getStaticPaths({ paginate }) {
	const allPosts = await Promise.all(
		(await getCollection('blog')).map(async (post) => {
			const { body } = post;
			const readingTime = getReadingTime(body);

			// Generate subtle hue based on post id or title
			const identifier = post.id || post.data.title || 'default';
			const hoverHue = Math.abs(
				identifier.charCodeAt(0) +
				identifier.charCodeAt(identifier.length - 1)
			) % 360;
			const hoverColor = `hsla(${hoverHue}, 20%, 50%, 0.08)`;

			return {
				...post,
				readingTime: readingTime.text,
				hoverColor
			};
		})
	);

	const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

	return paginate(sortedPosts, { pageSize: 6 });
}

const { page } = Astro.props;
const posts = page.data;
---

<!doctype html>
<html lang="en">
	<head>
		<script is:inline>
			if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
				document.documentElement.classList.add('dark')
			} else {
				document.documentElement.classList.remove('dark')
			}
		</script>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			body {
				padding-bottom: 6rem;
			}

			main {
				max-width: 800px;
				margin: 0 auto;
				padding: 2rem 1rem;
			}

			.blog-header {
				margin-bottom: 3rem;
			}

			.blog-title-container {
				display: flex;
				align-items: center;
				justify-content: space-between;
				margin-bottom: 0.5rem;
			}

			.search-container {
				position: relative;
				display: flex;
				align-items: center;
				justify-content: flex-end;
			}

			.search-toggle {
				position: relative;
				z-index: 10;
				display: flex;
				align-items: center;
				justify-content: center;
				width: 40px;
				height: 40px;
				border-radius: 20px;
				border: 1px solid #9ca3af;
				background-color: rgba(230, 228, 224, 0.9);
				backdrop-filter: blur(20px);
				color: #000000;
				cursor: pointer;
				transition: all 0.3s ease;
			}

			.search-toggle.hidden {
				opacity: 0;
				pointer-events: none;
			}

			.dark .search-toggle {
				border-color: #4b5563;
				background-color: rgba(30, 30, 30, 0.9);
				color: #ffffff;
			}

			.search-toggle:hover {
				background-color: rgba(200, 198, 194, 0.8);
				border-color: #9ca3af;
				transform: scale(1.05);
			}

			.dark .search-toggle:hover {
				background-color: rgba(60, 60, 60, 0.8);
				border-color: #4b5563;
			}

			.search-input-container {
				position: absolute;
				top: 0;
				right: 0;
				width: 40px;
				height: 40px;
				overflow: hidden;
				transition: all 0.3s ease;
				border-radius: 20px;
			}

			.search-input-container.expanded {
				width: 250px;
			}

			.search-input {
				width: 100%;
				height: 40px;
				padding: 0 1rem;
				padding-right: 3rem;
				border: 1px solid #9ca3af;
				border-radius: 20px;
				background-color: rgba(230, 228, 224, 0.9);
				backdrop-filter: blur(20px);
				color: #000000;
				outline: none;
				transition: all 0.3s ease;
			}

			.search-close {
				position: absolute;
				top: 50%;
				right: 8px;
				transform: translateY(-50%);
				width: 24px;
				height: 24px;
				border: none;
				background: none;
				color: #000000;
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: center;
				border-radius: 50%;
				transition: all 0.2s ease;
				opacity: 0;
				pointer-events: none;
			}

			.search-input-container.expanded .search-close {
				opacity: 1;
				pointer-events: all;
			}

			.search-close:hover {
				background-color: rgba(200, 198, 194, 0.8);
				color: #000000;
			}

			.dark .search-close {
				color: #ffffff;
			}

			.dark .search-close:hover {
				background-color: rgba(60, 60, 60, 0.8);
				color: #ffffff;
			}

			.dark .search-input {
				border-color: #4b5563;
				background-color: rgba(30, 30, 30, 0.9);
				color: #ffffff;
			}

			.search-input:focus {
				border-color: #9ca3af;
				background-color: rgba(200, 198, 194, 0.8);
			}

			.dark .search-input:focus {
				border-color: #4b5563;
				background-color: rgba(60, 60, 60, 0.8);
			}

			.search-input::placeholder {
				color: rgba(0, 0, 0, 0.6);
			}

			.dark .search-input::placeholder {
				color: rgba(255, 255, 255, 0.6);
			}

			.blog-title {
				font-size: 2.5rem;
				font-weight: bold;
				margin-bottom: 0.5rem;
				color: #000;
			}

			.dark .blog-title {
				color: #fff;
			}

			.blog-subtitle {
				color: #6b7280;
				font-size: 1rem;
			}

			.dark .blog-subtitle {
				color: #9ca3af;
			}

			.posts-grid {
				display: flex;
				flex-direction: column;
				gap: 2rem;
			}

			.post-card {
				position: relative;
				border-radius: 16px;
				overflow: hidden;
				transition: all 0.3s ease;
				height: 180px;
				border: 1px solid #d1d5db;
			}

			.dark .post-card {
				border-color: #4b5563;
			}

			.post-card:hover .post-image {
				filter: brightness(0.7) saturate(1.2);
				transition: filter 0.3s ease;
			}

			.post-card:hover .post-overlay {
				opacity: 0.8;
				transition: opacity 0.3s ease;
			}

			/* Cards without images */
			.post-card:not(:has(.post-image)) {
				background-color: #e6e4e0;
			}

			.dark .post-card:not(:has(.post-image)) {
				background-color: #000000;
			}

			.post-card:not(:has(.post-image)):hover {
				background-color: #c9c7c3;
				transition: background-color 0.3s ease;
			}

			.dark .post-card:not(:has(.post-image)):hover {
				background-color: #2a2a2a;
			}

			.post-card:not(:has(.post-image)) .post-overlay {
				display: none;
			}

			.post-image {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				object-fit: cover;
				z-index: 1;
			}

			.post-overlay {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: linear-gradient(to right,
					#e6e4e0 0%,
					rgba(230, 228, 224, 0.8) 30%,
					rgba(230, 228, 224, 0.3) 50%,
					transparent 80%
				);
				z-index: 2;
			}

			.dark .post-overlay {
				background: linear-gradient(to right,
					#000000 0%,
					rgba(0, 0, 0, 0.8) 30%,
					rgba(0, 0, 0, 0.3) 50%,
					transparent 80%
				);
			}

			.post-content {
				position: absolute;
				top: 0;
				left: 0;
				width: 60%;
				height: 100%;
				display: flex;
				flex-direction: column;
				justify-content: center;
				padding: 1.5rem;
				color: #111827;
				z-index: 3;
			}

			.dark .post-content {
				color: #f9fafb;
			}

			/* Make cards without images fully clickable */
			.post-card:not(:has(.post-image)) .post-content {
				width: 100%;
			}

			.post-card:not(:has(.post-image)) a {
				display: block;
				width: 100%;
				height: 100%;
			}

			.post-date {
				font-size: 0.875rem;
				color: #6b7280;
				margin-bottom: 0.5rem;
			}

			.dark .post-date {
				color: #9ca3af;
			}

			.post-title {
				font-size: 1.5rem;
				font-weight: 600;
				color: #111827;
				margin-bottom: 0.75rem;
				line-height: 1.3;
				text-decoration: none;
			}

			.dark .post-title {
				color: #f9fafb;
			}

			.post-description {
				color: #6b7280;
				line-height: 1.6;
				margin-bottom: 1rem;
			}

			.dark .post-description {
				color: #9ca3af;
			}

			.post-meta {
				display: flex;
				align-items: center;
				gap: 1rem;
				font-size: 0.875rem;
				color: #6b7280;
			}

			.dark .post-meta {
				color: #9ca3af;
			}

			.reading-time {
				display: flex;
				align-items: center;
				gap: 0.25rem;
			}

			.language-tag {
				display: flex;
				align-items: center;
				gap: 0.25rem;
			}

			@media (max-width: 768px) {
				.posts-grid {
					gap: 1.5rem;
				}

				.blog-title {
					font-size: 2rem;
				}

				.blog-title-container {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.75rem;
				}

				.search-container {
					align-self: flex-end;
				}

				.search-input-container.expanded {
					width: 200px;
				}

				main {
					padding: 1rem;
				}

				.post-card {
					height: 150px;
				}

				.post-content {
					padding: 1.5rem 1rem 0.75rem 1rem;
				}

				.post-title {
					font-size: 1.25rem;
				}
			}

			/* Custom fade-in-down animation */
			@keyframes fadeInDown {
				from {
					opacity: 0;
					transform: translateY(-30px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			.animate-fadeInDown {
				animation: fadeInDown 0.8s ease-out forwards;
				opacity: 0;
			}

			/* Pagination styles */
			.pagination {
				display: flex;
				justify-content: center;
				align-items: center;
				gap: 2rem;
				margin-top: 3rem;
				padding: 2rem 0;
			}

			.pagination-link {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0.75rem 1.5rem;
				border: 1px solid #d1d5db;
				border-radius: 8px;
				text-decoration: none;
				color: #374151;
				font-weight: 500;
				transition: all 0.2s ease;
			}

			.dark .pagination-link {
				border-color: #4b5563;
				color: #d1d5db;
			}

			.pagination-link:hover {
				background-color: #f9fafb;
				border-color: #9ca3af;
			}

			.dark .pagination-link:hover {
				background-color: #1f2937;
				border-color: #6b7280;
			}

			.pagination-info {
				color: #6b7280;
				font-weight: 500;
			}

			.dark .pagination-info {
				color: #9ca3af;
			}

			@media (max-width: 768px) {
				.pagination {
					flex-direction: column;
					gap: 1rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main class="animate-fadeInDown">
			<div class="blog-header animate-fadeInDown" style="animation-delay: 0.1s;">
				<div class="blog-title-container">
					<h1 class="blog-title">Blog</h1>
					<div class="search-container">
						<button id="search-toggle" class="search-toggle">
							<svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
								<path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L23.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
							</svg>
						</button>
						<div id="search-input-container" class="search-input-container">
							<input
								type="text"
								id="search-input"
								class="search-input"
								placeholder="Rechercher..."
								autocomplete="off"
							/>
							<button id="search-close" class="search-close">
								<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
									<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
								</svg>
							</button>
						</div>
					</div>
				</div>
				<p class="blog-subtitle">Page {page.currentPage} - Showing {((page.currentPage - 1) * page.size) + 1}-{Math.min(page.currentPage * page.size, page.total)} of {page.total} posts</p>
			</div>

			<div class="posts-grid animate-fadeInDown" style="animation-delay: 0.2s;">
				{
					posts.map((post) => (
						<article
							class="post-card"
							style={`--hover-color: ${post.hoverColor}`}
						>
							<a href={`/blog/${post.id}/`} style="text-decoration: none; color: inherit;">
								{post.data.heroImage && (
									<Image
										class="post-image"
										width={400}
										height={200}
										src={post.data.heroImage}
										alt={post.data.title}
									/>
								)}
								<div class="post-overlay"></div>
								<div class="post-content">
									<div class="post-date">
										<FormattedDate date={post.data.pubDate} />
									</div>
									<h2 class="post-title">{post.data.title}</h2>
									{post.data.description && (
										<p class="post-description">{post.data.description}</p>
									)}
									<div class="post-meta">
										<div class="reading-time">
											<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
												<path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67V7z"/>
											</svg>
											<span>{post.readingTime}</span>
										</div>
									</div>
								</div>
							</a>
						</article>
					))
				}
			</div>

			{(page.url.prev || page.url.next) && (
				<div class="pagination animate-fadeInDown" style="animation-delay: 0.3s;">
					{page.url.prev && (
						<a href={page.url.prev} class="pagination-link pagination-prev">
							<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
								<path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
							</svg>
							Précédent
						</a>
					)}

					<span class="pagination-info">
						Page {page.currentPage} sur {page.lastPage}
					</span>

					{page.url.next && (
						<a href={page.url.next} class="pagination-link pagination-next">
							Suivant
							<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
								<path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
							</svg>
						</a>
					)}
				</div>
			)}
		</main>
		<Footer />

		<script>
			// Initialize search functionality when DOM is loaded
			document.addEventListener('DOMContentLoaded', () => {
				// Get DOM elements
				const searchToggle = document.getElementById('search-toggle');
				const searchInputContainer = document.getElementById('search-input-container');
				const searchInput = document.getElementById('search-input');
				const searchClose = document.getElementById('search-close');

				let isExpanded = false;

				// Load Pagefind dynamically (only in production)
				const loadPagefind = async () => {
					try {
						// Check if we're in production and pagefind files exist
						const response = await fetch('/pagefind/pagefind.js').catch(() => null);
						if (response && response.ok) {
							// Load the script dynamically
							const script = document.createElement('script');
							script.src = '/pagefind/pagefind.js';
							document.head.appendChild(script);

							script.onload = () => {
								console.log('Pagefind loaded successfully');
							};
						}
					} catch (error) {
						console.log('Pagefind not available (development mode)');
					}
				};

				// Load Pagefind
				loadPagefind();

				// Function to expand search
				const expandSearch = () => {
					isExpanded = true;
					searchToggle.classList.add('hidden');
					searchInputContainer.classList.add('expanded');
					// Focus input after animation
					setTimeout(() => {
						searchInput.focus();
					}, 300);
				};

				// Function to collapse search
				const collapseSearch = () => {
					isExpanded = false;
					searchToggle.classList.remove('hidden');
					searchInputContainer.classList.remove('expanded');
					searchInput.value = '';
					searchInput.blur();
				};

				// Toggle search input visibility
				searchToggle.addEventListener('click', expandSearch);
				searchClose.addEventListener('click', collapseSearch);

				// Handle search input
				searchInput.addEventListener('input', async (e) => {
					const query = e.target.value.trim();
					if (query.length < 2) return;

					try {
						if (window.pagefind) {
							const search = await window.pagefind.search(query);
							console.log('Search results:', search);
							// You can implement result display here
						} else {
							console.log('Search query:', query, '(Pagefind not available in development)');
						}
					} catch (error) {
						console.error('Search error:', error);
					}
				});

				// Close search when clicking outside
				document.addEventListener('click', (e) => {
					if (!searchToggle.contains(e.target) && !searchInputContainer.contains(e.target)) {
						if (isExpanded) {
							collapseSearch();
						}
					}
				});

				// Close search on escape key
				document.addEventListener('keydown', (e) => {
					if (e.key === 'Escape' && isExpanded) {
						collapseSearch();
					}
				});
			});
		</script>
	</body>
</html>
